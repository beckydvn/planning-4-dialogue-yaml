---
version: "3.1"
name: order-pizza

# to extract from the user. defines what each variable can hold
# also defines examples for rasa to use
# types available:
#   flag
#       can set to T/F initially
#   fflag (fuzzy flag -- yes, no, maybe)
#       can set to T/F/M (maybe) initially
#   enum
#   json
context-variables:
  order:
    type: enum
    known:
      type: fflag
      config: false
    config:
      cheese:
        variations:
        - chz
        - cheez
        - mozzarella
        - fromage
        - cheesy
      pepperoni:
        variations:
        - peperoni
        - meat
        - sausage
      mushroom:
        variations:
        - vegetable
        - veggie
        - musroom
        - shroom
      gluten free:
        variations:
        - healthy
        - gluten-free
        - gf
      hawaiian:
        variations:
        - pineapple
        - ham and pineapple
        - sweet
  order_available:
    type: flag
    config: false
  location:
    type: json
    known: 
      type: fflag
      config: false
    config:
      extraction: spacy
      method: gpe
      examples:
      - New York
      - Denver
      - Tallahassee
      - Chicago
      - Austin
  payment_method:
    type: enum
    known: 
      type: fflag
      config: false
    config: 
      credit:
        variations:
        - crdit
        - credit card
        - visa
        - mastercard
      debit:
        variations: 
        - dbit
        - debit card
        - chequing account
        - chequing
        - savings account
        - savings  
      cash:
        variations:
        - money
        - notes
  card_number:
    type: json
    known:
      type: fflag
      config: false
    config:
      extraction: regex
      pattern: \d{16}
  goal:
    type: flag
    config: false

# combine with the context variables above to pass to rasa
# NOTE: deleted the | character which seems to convert the list to a single
# string (rasa uses this, not sure why though -- it parses much nicer without
# it).
nlu:
  - intent: greet
    examples:
      - Hey
      - Hi
      - hey there
  - intent: leave
    examples:
      - Goodbye
      - Bye
      - That's all
      - i'm done
  - intent: confirm
    examples:
      - yes
      - yeah
      - that's it
      - Y
      - mhm
      - confirm
      - yes please
  - intent: deny
    examples:
      - no
      - not at all
      - that's not what i meant
      - absolutely not
      - i don't want that
      - nah
      - no thanks
      - no thank you
  - intent: share_order
    # specify entities so we can ensure all examples use exactly these entities
    # (no more, no less)
    entities: 
      - order 
    examples:
      - I want a $order$ pizza
      - $order$ pizza please!
      - Do you have $order$ pizza?
  - intent: share_location
    entities:
      - location 
    examples:
      - I live in $location$.
      - Do you deliver to $location$?
      - I want my pizza to be delivered to $location$.
  - intent: share_payment_method
    entities:
      - payment_method
    examples:
      - I want to pay by $payment_method$.
      - Can I pay with $payment_method$?
      - I will pay in $payment_method$
  - intent: pay
    entities:
      - card_number
    examples:
      - My credit card number is $card_number$.
      - This is my account number $card_number$
      - Ok, the number on my card is $card_number$.

# can set up template effects
effects:
  # general validate-response effect created by default
  validate-response:
    # parameters that the template can take
    parameters:
      - entity
      - valid-intent
      - invalid-intent
      - unclear-intent
      - valid-follow-up
    type: oneof
    outcomes:
      # received a valid value
      valid:
        updates:
          entity:
            value: $entity$
            known: true
        intent: valid-intent
        follow_up: valid-follow-up
      # need to ask again, still have no idea
      invalid:
        follow_up: parent-action
        intent: invalid-intent
      # need to clarify the response
      unclear:
        updates:
          entity:
            known: Maybe
        follow_up:
          clarify: parent-action
        intent: unclear-intent
  # general confirm effect created by default
  confirm-response:
    parameters:
      - entity
    type: oneof
    outcomes:
      confirm:
        updates:
          entity:
            value: $entity$
            known: true
        intent: confirm
      deny:
        updates:
          entity:
            value: null
            known: false
        intent: deny

actions:
  dialogue:
    ask-location:
      subtype: dialogue disambiguation 
      message_variants:
        - "Where are you located?"
        - "Where do you live?"
        - "Where would you like to deliver?"
      condition:
        location:
          known: false
      effects:
        validate-response:
          entity: location
          # invalid-intent and unclear-intent would be decided by the executor based on
          # the extraction results/confidence
          valid-intent: share_location
      # if supplied, creates a corresponding "clarify" action during parsing which 
      # assumes as a condition that the entities have their known attribute set
      # to maybe and the effect is the default confirm above
      clarify:
        entity: location
        message_variants:
          - "Are you located in $location$?"
          - "Do you live in $location$?"

    # ask for the user's order
    ask-order:
      subtype: dialogue disambiguation 
      message_variants:
        - "What would you like to order?"
        - "What type of pizza would you like?"
      condition:
        order:
          known: false
      effects:
        validate-response:
          entity: order
          valid-intent: share_order
          valid-follow-up: check-order-availability
      clarify:
        entity: order
        message_variants:
          - "Would you like to order $order$?"

    # ask for the user's payment method
    ask-payment:
      subtype: dialogue disambiguation 
      message_variants:
        - "How would you like to pay?"
      condition:
        order:
          known: true
        location:
          known: true
        payment_method:
          known: false
      effects:
        validate-response:
          entity: payment_method
          valid-intent: share_payment_method
      clarify:
        entity: order
        message_variants:
          - "Would you like to pay with $payment_method$?"

    # ask for the user's card
    ask-card-number:
      subtype: dialogue disambiguation 
      message_variants:
        - "Enter your card number."
        - "Please enter your card details."
      condition:
        payment_method:
          known: true
          config:
            - credit
            - debit
      effects:
        validate-response:
          entity: card_number
          valid-intent: pay

    # exit due to site being down
    exit:
      message_variants:
        - "Pizza site was unable to make the order. Exiting..."

  api:
    check-order-availability:
      message_variants:
        - "Checking order availability..."
      call:
        endpoint: pizzasite.com/orders 
      effects:
        type: oneof
        outcomes:
          in-stock:
            updates:
              order_available: true
            # status of the call (helps determine the outcome similar to intent)
            status: success 
          out-of-stock:
            updates:
              order:
                known: false
            follow_up: ask-order
            status: success
          site-down:
            follow_up: exit
            status: 404

    place-order:
      message_variants:
      - "Making the order..."
      call:
        endpoint: pizzasite.com/orders # make the call
      condition:
        or:
          card_number:
            known: True
          payment_method:
            config: cash
      effects:
        type: oneof
        outcomes:
          success:
            updates:
              goal: true
            status: success
          site-down:
            follow_up: exit
            status: 404

...