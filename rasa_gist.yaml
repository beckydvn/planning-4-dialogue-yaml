---
version: "3.1"
name: order-pizza

# to extract from the user. defines what each variable can hold
# also defines rasa "lookups" for variables
context-variables:
  - user_initiative:
    type: flag
    config: false
  - order:
    type: enum
    config:
      - cheese
      - pepperoni
      - mushroom
      - gluten free
      - hawaiian
    type: spacy_gpe # spacy location extractor
  - payment_method:
    type: enum
    config: 
      - credit
      - credit card
      - debit
      - debit card
      - cash
  - card_number:
    type: regex
    config: \d{16}
  - goal:
    type: flag
    config: false

# combine with the context variables above to pass to rasa
nlu:
  - intent: greet
    examples: |
      - Hey
      - Hi
      - hey there

  - intent: leave
    examples: |
      - Goodbye
      - Bye
      - That's all

  - intent: share_order
    examples: |
      - I want a [cheese](order) pizza
      - [pepperoni](order) pizza please!
      - Do you have [mushroom](order) pizza?

  - intent: share_location
    examples: |
      - I live in [New York City](location).
      - Do you deliver to [Denver](location)?
      - I want my pizza to be delivered to [Chicago](location).

  - intent: share_payment_method
    examples: |
      - I want to pay by [credit card](payment_method).
      - Can I pay with [debit](payment_method)?
      - I will pay in [cash](payment_method)

  - intent: pay
    examples: |
      - My credit card number is [0123456789012342](card_number).
      - This is my account number [3637456789573835](card_number)
      - Ok, the number on my card is [0586456789456048](card_number).

# can set up template effects
effects:
  # general validate-response effect created by default
  validate-response:
    type: one-of # can be and or one-of
    outcomes:
      - type: and
        - have: {entity} # received a valid value
      - forced-follow-up: {parent_action} # need to ask again, still have no idea
      - type: and
        - maybe_have: location
        - forced-follow-up: clarify # will run the clarify version of the parent action

# each action that the agent can perform is composed of:
#   a category (optional). this allows for setting restrictions on categories
#       of actions later, and can hold across action "types."
#   condition. these have to occur before the action occurs.
#       options:
#           have (bot has extracted this entity already)
#           maybe_have (bot may have this entity, but needs to clarify)
#   effects. what the action will do.
#       options:
#           update a variable value/status
#           rule out actions (rule out actions from occurring after this one)
#               can use for:
#                   list of actions
#                   category of actions
#                   exclude all but, followed by a list of actions
#           forced follow-up
actions:
  # ask-for actions assume:
  #   conditions:
  #   - that the agent does not have, or maybe have, the relevant context variable
  #     that it needs to extract from the user
  #   - the agent has initiative
  ask-for:
    ask-location:
      name: ask-location
      category: get_info
      entities:
        - location
      # if clarify-dialogue is specified, then we create a duplicate "clarify"
      # action, which assumes as a condition that the agent may have the variable
      dialogue:
        ask-dialogue: "Where are you located?"
        clarify-dialogue: "Are you located in {location}?"
      effects:
        validate-response: location

    # ask for the user's order
    ask-order:
      name: ask-order
      category: get_info
      entities:
        - order
      # if clarify-dialogue is specified, then we create a duplicate "clarify"
      # action, which assumes as a condition that the agent may have the variable
      dialogue:
        ask-dialogue: "What would you like to order?"
        clarify-dialogue: "Would you like to order {order}?"
      effects:
        validate-response: order

  #   payment_method:
  #     category: get_info
  #     entity: 


  # - custom:


      
  # # check if what the user requested is available
  # - check_order_availability
  #   category: get_info
  #   need:
  #     have:
  #       - order
      


  #   effects:
  # # check if the restaurant is currently delivering to that city
  # - check_city_delivery
  # - process_payment
  # # place order if the payment goes through
  # - place_order

...